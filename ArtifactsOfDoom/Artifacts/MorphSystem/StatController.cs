using ArtifactGroup;
using ArtifactsOfDoom;
using Messenger;
using R2API.Networking;
using R2API.Networking.Interfaces;
using RoR2;
using System;
using System.Collections.Generic;
using System.Text;
using UnityEngine;
using UnityEngine.Networking;
using static On.RoR2.CharacterMaster;
using static On.RoR2.GenericSkill;

namespace csProj.Artifacts.MorphSystem
{
	// Responsible for modifying the stats of clients and servers 
	// for the Artifact of Metamorphosis.
    public class StatController
    {
		static public ArtifactOfMorph AOM;
		public StatController(ArtifactOfMorph _artifact)
        {
			AOM = _artifact;
		}

		// package generated by client stat updates
		// playerID ids are unique for the list of stat structs
		public struct statPack {
            public bool valid;
			public uint playerID;
			public double speedMult;
			public double healthMult;
			public double attackSpeedMult;
			public double dmgMult; 
			public double size;
			public double cooldownMult;
			public String eliteTypes;
		}

		public static List<statPack> statList = new List<statPack>();

        // put a stat package in the stat list
        // if the id is unique, add to the list.
        // if not unique, update the corresponding statPack
        public static void injectStatPackage(
        uint _playerID,
        double _speedMult,
        double _healthMult,
        double _attackSpeedMult,
        double _dmgMult,
        double _size,
        double _cooldownMult,
        String _eliteTypes)
        {
            if (!NetworkServer.active)
            {
                Messenger.MessageHandler.globalMessage("statpackage error: ISCLIENT!!! Report this bug to the mod author (ArtifactsofDoom)");
                return;
            }

            statPack pack = new statPack();
            pack.playerID = _playerID;
            pack.speedMult = _speedMult;
            pack.healthMult = _healthMult;
            pack.attackSpeedMult = _attackSpeedMult;
            pack.dmgMult = _dmgMult;
            pack.size = _size;
            pack.cooldownMult = _cooldownMult;
            pack.eliteTypes = _eliteTypes;
            pack.valid = true;

            // loop through packs, comparing ids...
            bool isUnique = true;
            for (int i = 0; i < statList.Count; i++)
            {
                statPack currentPack = statList[i];

                if (currentPack.playerID == pack.playerID)
                {
                    //Debug.Log("(Artifacts Of Doom) (statRequest.pack.inject) Modifying existing pack :: ID - " + pack.playerID + " size - " + pack.size);
                    statList[i] = pack;
                    isUnique = false;
                }
            }

            if (isUnique)
            {
                Debug.Log("(Artifacts Of Doom) (statRequest.pack.inject) Adding new player:: ID - " + pack.playerID + " size - " + pack.size);
                statList.Add(pack);
            }
        }

        public static statPack retrieveStatPackage(CharacterMaster master, CharacterBody body)
        {
            uint idTarget = master.networkIdentity.netId.Value;
            Debug.Log("(statRequest.pack.retrieve) idTarget = " + idTarget + " name = " + body.GetUserName());
            for(int i = 0; i < statList.Count; i++)
            {
                statPack currentPack = statList[i];
                Debug.Log("(statRequest.pack.retrieve) currentPack :: ID -> " + currentPack.playerID + " eliteTypes :: " + currentPack.eliteTypes + " size :: " + currentPack.size);
                if (currentPack.playerID == idTarget)
                {
                    Debug.Log("(statRequest.pack.retrieve) pack matches with " + body.GetUserName() + " ID :: " + idTarget);
                    return currentPack;
                }
            }

            Debug.Log("(statRequest.pack.retrieve) Failed to find body of :: " + body.GetUserName() + " returning invalid package");

            statPack p = new statPack();
            p.valid = false;
            return p;
        }
    }
}

